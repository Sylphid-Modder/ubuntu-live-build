#!/bin/bash

function attach-devices () {
    echo "INFO: Setting chroot mount points..."

chroot $1 <<-EOS 
umount /proc
umount /sys
umount /dev/pts
mount none -t proc /proc
mount none -t sysfs /sys
mount none -t devpts /dev/pts
export HOME=/root
EOS

}

function setup-apt () {
    echo "INFO: Setting mount points..."
    # Bind devices to originals. DO NOT DELETE ENVIRONMENT WITHOUT UNMOUNT.
    mount --bind /dev $1/dev
    mount --bind /run $1/run

    attach-devices $1
    
    echo "INFO: Setting host name..."
    sed -n -e "1p" $2 > $1/etc/hostname

    echo "INFO: Setting up apt..."
    APT_REPOURL=$(sed -n -e "4p" $2)
    APT_REPOSUITE=$(sed -n -e "3p" $2)
cat <<- EOS > $DEBOOTSTRAPDIR/etc/apt/sources.list
deb $APT_REPOURL $APT_REPOSUITE main restricted universe multiverse
deb-src $APT_REPOURL $APT_REPOSUITE main restricted universe multiverse

deb $APT_REPOURL "$APT_REPOSUITE-security" main restricted universe multiverse
deb-src $APT_REPOURL "$APT_REPOSUITE-security" main restricted universe multiverse

deb $APT_REPOURL "$APT_REPOSUITE-updates" main restricted universe multiverse
deb-src $APT_REPOURL "$APT_REPOSUITE-updates" main restricted universe multiverse
EOS

    chroot $DEBOOTSTRAPDIR <<- EOS
export LC_ALL=C
apt update
EOS

}

function setup-machine () {
    chroot $1 <<- EOS
export LC_ALL=C
apt install -y libterm-readline-gnu-perl systemd-sysv
dbus-uuidgen > /etc/machine-id
ln -fs /etc/machine-id /var/lib/dbus/machine-id
dpkg-divert --local --rename --add /sbin/initctl
ln -s /bin/true /sbin/initctl

apt upgrade -y
apt install -y sudo casper laptop-detect os-prober network-manager wireless-tools locales grub-common grub-gfxpayload-lists grub-pc grub-efi-amd64-bin grub2-common nano less curl memtest86+
apt install -y --no-install-recommends linux-generic
EOS
}

function install-packages () {
    PACKAGE_LIST=$1/../package-list
        echo "INFO: Installing specified softwares..."
    CUSTOMDPKGFOLDER=$1/../custom-dpkgs
    PACKAGES=("")
    while read i
    do
        PACKAGES+=("$i")
    done < $PACKAGE_LIST
    
chroot $1 << EOS
export LC_ALL=C
apt install -y ${PACKAGES[@]}
EOS
    if [ "$(ls $CUSTOMDPKGFOLDER)" != "" ]; then
        echo "INFO: Installing custom dpkgs..."
        if [ ! -d $1/dpkgs ]; then
        	mkdir $1/dpkgs
        fi
        cp $CUSTOMDPKGFOLDER/*.deb $1/dpkgs/
        echo "DEBUG: Copied all files."
chroot $1 << EOS
export LC_ALL=C
apt install -y /dpkgs/*.deb
EOS
    rm -r $1/dpkgs/
    fi
    
}

function cleanup () {
        echo "INFO: Cleaning up environments..."
chroot $1 <<- EOS
truncate -s 0 /etc/machine-id
rm /sbin/initctl
dpkg-divert --rename --remove /sbin/initctl
export LC_ALL=C
rm -rf /tmp/*
apt autoremove -y
apt clean
umount /proc
umount /sys
umount /dev/pts
rm ~/.bash_history

EOS
    umount $1/dev
    umount $1/run
}

set -e
# Detect root.
if [ "$EUID" != 0 ]; then
    echo "You're not root. This program requires root privileges."
    exit
fi

WORKDIR=$(pwd)

# Environment setup.
if [ "$1" = "setup" ]; then
    if [ -z "$2" ]; then
        echo "ERR: OS name has not been specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Version information has not been specified. Abort."
        exit
    fi
    
    OSNAME=$2
    OSVER=$3
    
    echo "INFO: Installing required packages..."
    apt install -y binutils debootstrap casper curl squashfs-tools xorriso grub-pc-bin grub-efi-amd64-bin mtools
    
    echo "INFO: Creating new environment..."
    if [ -d $WORKDIR/$OSNAME ]; then
        echo "ERR: Environment exists. Abort."
        exit
    fi
    mkdir $WORKDIR/$OSNAME
    touch $WORKDIR/$OSNAME/build-info.txt
    printf "$OSNAME\n$OSVER" >> $WORKDIR/$OSNAME/build-info.txt
    
    mkdir $WORKDIR/$OSNAME/image
    mkdir $WORKDIR/$OSNAME/debootstrap
    mkdir $WORKDIR/$OSNAME/root
    mkdir $WORKDIR/$OSNAME/custom-dpkgs
    touch $WORKDIR/$OSNAME/package-list
    cp /etc/os-release $WORKDIR/$OSNAME/os-release-custom
    
    echo "INFO: Environment $OSNAME is created successfully."

# Update version informations
elif [ "$1" = "update" ]; then
    if [ -z "$2" ]; then
        echo "ERR: No directory has been specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Please input the new name of distribution. Abort."
    fi

    INFODIR=$WORKDIR/$2
    INFOFILE=$INFODIR/build-info.txt
    
    if [ ! -f $INFOFILE ]; then
        echo "ERR: Build information file doesn't exist. Abort."
        exit
    fi
    
    sed -i -e "2c $3" $INFOFILE
    echo "INFO: Build information has been changed successfully."

# Update the distro name.
elif [ "$1" = "change-name" ]; then
    if [ -z "$2" ]; then
        echo "ERR: No directory has been specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Please input the new name of distribution. Abort."
    fi

    INFODIR=$WORKDIR/$2
    INFOFILE=$INFODIR/build-info.txt

    if [ ! -f $INFOFILE ]; then
        echo "ERR: Build information file doesn't exist. Abort."
        exit
    fi

    sed -i -e "1c $3" $INFOFILE
    echo "INFO: Build information has been changed successfully."

# Execute debootstrap with given settings.
elif [ "$1" = "debootstrap" ]; then
    if [ -z "$2" ]; then
        echo "ERR: Target path is not specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Suite is not specified. Abort."
        exit
    elif [ -z "$4" ]; then
        echo "ERR: Mirror server's URL is not specified. Abort."
        exit
    fi
    
    BUILDINFO=$WORKDIR/$2/build-info.txt
    SUITE=$3
    TARGETPATH=$WORKDIR/$2/debootstrap
    URL=$4
    
    if [ ! -d $TARGETPATH ]; then
        echo "ERR: Target directory has not been found. Abort."
        exit
    fi
    
    echo "INFO: Executing debootstrap..."
    debootstrap --arch=amd64 --variant=minbase $SUITE $TARGETPATH $URL
    
    echo "INFO: Saving server URL for build..."
    sed -i -e "3c $SUITE" $BUILDINFO
    sed -i -e "4c $URL" $BUILDINFO
    
    echo "INFO: Process Finished."

# Install specified packages to the debootstrap environment before build process.
elif [ "$1" = "install-packages" ]; then
    if [ -z "$2" ]; then
        echo "ERR: No directory has been specified. Abort."
        exit
    elif [ ! -d "$WORKDIR/$2" ]; then
        echo "ERR: No such directory. Abort."
        exit
    elif [ ! -d "$WORKDIR/$2/debootstrap/usr" ]; then
        echo "ERR: Invalid profile. Abort."
        exit
    fi

    DEBOOTSTRAPDIR=$WORKDIR/$2/debootstrap
    BUILDINFO=$WORKDIR/$2/build-info.txt
    
    setup-apt $DEBOOTSTRAPDIR $BUILDINFO
    setup-machine $DEBOOTSTRAPDIR
    install-packages $DEBOOTSTRAPDIR
    cleanup $DEBOOTSTRAPDIR

# Build and master process.
elif [ "$1" = "build" ]; then
    if [ -z "$2" ]; then
        echo "ERR: Target path is not specified. Abort."
        exit
    fi
    
    TARGETPATH=$WORKDIR/$2
    
    if [ ! -d "$TARGETPATH" ]; then
        echo "ERR: No such directory. Abort."
        exit
    fi
    
    if [ ! -f "$TARGETPATH/build-info.txt" ]; then
        echo "ERR: Build information was not found. Abort."
        exit
    elif [ ! -f "$TARGETPATH/package-list" ]; then
        echo "ERR: Package list was not found. Abort."
        exit    
    elif [ ! -d "$TARGETPATH/custom-dpkgs" ]; then
        echo "ERR: Additional DPKGs folder was not found. Abort."
        exit
    elif [ ! -d "$TARGETPATH/root" ]; then
        echo "ERR: Customized root directory was not found. Abort."
        exit
    fi
    
    BUILDINFO=$TARGETPATH/build-info.txt
    PACKAGE_LIST=$TARGETPATH/package-list
    CUSTOMDPKGFOLDER=$TARGETPATH/custom-dpkgs
    EDITEDROOT=$TARGETPATH/root
    DEBOOTSTRAPDIR=$TARGETPATH/debootstrap
    IMAGEDIR=$TARGETPATH/image
    OSNAME=$(sed -n -e '1p' $BUILDINFO)
    OSBUILDVER=$(sed -n -e '2p' $BUILDINFO)
    
    echo "Starting build: 
    OSNAME: $OSNAME
    OSBUILDVER: $OSBUILDVER
    CUSTOMDPKGFOLDER: $CUSTOMDPKGFOLDER
    EDITEDROOT: $EDITEDROOT
    DEBOOTSTRAPDIR: $DEBOOTSTRAPDIR
    IMAGEDIR: $IMAGEDIR
    "
    
    if [ -f "$IMAGEDIR/casper/filesystem.squashfs" ] || [ -f "$IMAGEDIR/casper/filesystem.size" ] ; then
        rm -f $IMAGEDIR/casper/filesystem.squashfs
        rm -f $IMAGEDIR/casper/filesystem.size
    fi
    
    setup-apt $DEBOOTSTRAPDIR $BUILDINFO
    
    echo "INFO: Installing important softwares..."
    setup-machine $DEBOOTSTRAPDIR
    
    install-packages $DEBOOTSTRAPDIR

    echo "INFO: Setting up the environment..."
chroot $DEBOOTSTRAPDIR <<- EOS
export LC_ALL=C
locale-gen
dpkg-reconfigure network-manager
update-initramfs -c -k all
EOS
    
    cleanup $DEBOOTSTRAPDIR
    
    echo "INFO: Copying os-release..."
    cp $TARGETPATH/os-release-custom $DEBOOTSTRAPDIR/etc/os-release
    
    echo "INFO: Copying edited root directory..."
    cp -R $EDITEDROOT/ $DEBOOTSTRAPDIR/
    
     
    echo "INFO: Creating ISO environment..."
    mkdir -p $IMAGEDIR/{casper,boot,install}
    cp -L $DEBOOTSTRAPDIR/boot/vmlinuz $IMAGEDIR/casper/vmlinuz
    cp -L $DEBOOTSTRAPDIR/boot/initrd.img $IMAGEDIR/casper/initrd
    cp $DEBOOTSTRAPDIR/boot/memtest86+.bin $IMAGEDIR/install/memtest86+
    
    echo "INFO: Downloading Memtest86+ for EFI..."
    curl -o $IMAGEDIR/install/tmp-memtest86.zip https://www.memtest.org/download/v7.00/mt86plus_7.00.binaries.zip
    unzip -p $IMAGEDIR/install/tmp-memtest86.zip memtest64.efi > $IMAGEDIR/install/memtest86plus-efi.efi
    unzip -p $IMAGEDIR/install/tmp-memtest86.zip memtest64.bin > $IMAGEDIR/install/memtest86plus-bios.bin
    rm -f $IMAGEDIR/install/tmp-memtest86.zip
    
    echo "INFO: Constructing GRUB menus..."
    touch $IMAGEDIR/$OSNAME
cat <<EOS > $IMAGEDIR/boot/grub.cfg
search --set=root --file /$OSNAME

set default=0
set timeout=5
insmod all_video

menuentry "$OSNAME $OSVER Live Boot" {
	echo "Loading linux..."
	linux /casper/vmlinuz boot=casper nopersistent toram quiet splash ---
	echo "Loading initial ram disk..."
	initrd /casper/initrd
}

menuentry "$OSNAME $OSVER Installation"{
	echo "Loading linux..."
	linux /casper/vmlinuz boot=casper only-ubiquity quiet splash ---
	echo "Loading initial ram disk..."
	initrd /casper/initrd
}

if [ \${grub_platform} == "efi" ]; then
	menuentry "Memtest86+ (UEFI 64Bit)"{
		chainloader /install/memtest86plus-efi.efi
	}
	
	menuentry "UEFI Firmware Settings" --id "uefi-firmware"{
		fwsetup
	}
fi
	
if [ \${grub_platform} == "pc" ]; then
	menuentry "Memtest86+ (BIOS 64Bit)"{
		linux /install/memtest64plus-bios.bin
	}
fi

menuentry "Reboot"{
	echo "System rebooting..."
	reboot
}

menuentry "Shutdown"{
	echo "System shutting now..."
	halt
}


EOS
    
    echo "INFO: Creating filesystem.manifest..."
    chroot $DEBOOTSTRAPDIR dpkg-query -W --showformat="\${Package} \${Version}\n" | tee $IMAGEDIR/casper/filesystem.manifest
    cp $IMAGEDIR/casper/filesystem.manifest $IMAGEDIR/casper/filesystem.manifest-desktop
    
    sudo sed -i "/ubiquity/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/casper/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/laptop-detect/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/os-prober/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    
    echo "INFO: Creating squashfs..."
    mksquashfs $DEBOOTSTRAPDIR $IMAGEDIR/casper/filesystem.squashfs
    printf $(sudo du -sx --block-size=1 $DEBOOTSTRAPDIR | cut -f1) > $IMAGEDIR/casper/filesystem.size
    
    echo "INFO: Creating diskdefines..."
echo "#define DISKNAME ${OSNAME} ${OSBUILDVER}
#define TYPE binary
#define TYPEbinary 1
#define ARCH amd64
#define DISKNUM 1
#define DISKNUM1 1
#define TOTALNUM 0
#define TOTALNUM0 1" > $IMAGEDIR/README.diskdefines
    
    echo "INFO: Configuring GRUB2 EFI..."
    grub-mkstandalone --format=x86_64-efi --output=$IMAGEDIR/boot/bootx64.efi --locales="" --fonts="" "boot/grub/grub.cfg=$IMAGEDIR/boot/grub.cfg"
    
    echo "INFO: Creating UEFI boot image..."
    dd if=/dev/zero of=$IMAGEDIR/boot/efiboot.img bs=1M count=10
    mkfs.vfat $IMAGEDIR/boot/efiboot.img
    LC_CTYPE=C mmd -i $IMAGEDIR/boot/efiboot.img efi efi/boot
    LC_CTYPE=C mcopy -i $IMAGEDIR/boot/efiboot.img $IMAGEDIR/boot/bootx64.efi ::efi/boot
    
    echo "INFO: Configuring GRUB2 PC..."
    grub-mkstandalone --format=i386-pc --output=$IMAGEDIR/boot/grub.img --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls halt reboot echo" --modules="linux16 linux normal iso9660 biosdisk search reboot halt echo" --locales="" --fonts="" "boot/grub/grub.cfg=$IMAGEDIR/boot/grub.cfg"
    cat /usr/lib/grub/i386-pc/cdboot.img $IMAGEDIR/boot/grub.img > $IMAGEDIR/boot/bios.img 
    
    echo "INFO: Calculating checksums..."
    sudo /bin/bash -c "(find . -type f -print0 | xargs -0 md5sum | grep -v -e 'md5sum.txt' -e 'bios.img' -e 'efiboot.img' > md5sum.txt)"
    
    echo "INFO: Generating ISO..."
    xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid "$OSNAME $OSBUILDVER Install" -output "$OSNAME-$OSBUILDVER-amd64-live.iso" -eltorito-boot boot/grub/bios.img -no-emul-boot -boot-load-size 4 -boot-info-table --eltorito-catalog boot/grub/boot.cat --grub2-boot-info --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img -eltorito-alt-boot -e EFI/efiboot.img -no-emul-boot -append_partition 2 0xef $IMAGEDIR/boot/efiboot.img -m "$IMAGEDIR/boot/efiboot.img" -m "$IMAGEDIR/boot/bios.img" -graft-points "/EFI/efiboot.img=$IMAGEDIR/boot/efiboot.img" "/boot/grub/bios.img=$IMAGEDIR/boot/bios.img" "$IMAGEDIR"
    
    chmod 766 $WORKDIR/$OSNAME-$OSBUILDVER-amd64-live.iso
    
    echo "INFO: Build process has been finished."

elif [ -z "$1" ] || [ "$1" = "help" ]; then
    echo "Usage:
     ./ubuntu-buildscript [option] [arguments]
      Options:

      Initialize:
         setup [OS-name] [version]: Setup a new environment.
         debootstrap [path] [suite] [URL]: Run debootstrap in the specified directory.

      Maintainance:
         update [path] [new-version]: Update the revision of specified environment.
         change-name [path] [new-name]: Update the name of specified environment. This command will change the name of distribution too.
         install-packages [path]: Install the packages, specified in the profile, or contained in the 'custom-dpkgs' directory of each profile. Requires the environment to have already executed debootstrap.
      
      Build:
         build [path]: Build and master the ISO."

else
    echo "ERR: Unexpected option."
fi
