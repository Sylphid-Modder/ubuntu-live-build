#!/bin/bash

set -e
# root detecting.
if [ "$EUID" != 0 ]; then
    echo "You're not root. This program requires root privileges."
    exit
fi

WORKDIR=$(pwd)

# setup process
if [ "$1" = "setup" ]; then
    if [ -z "$2" ]; then
        echo "ERR: OS name has not been specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Version information has not been specified. Abort."
        exit
    fi
    
    OSNAME=$2
    OSVER=$3
    
    echo "INFO: Installing required packages..."
    apt install -y binutils debootstrap casper curl squashfs-tools xorriso grub-pc-bin grub-efi-amd64-bin mtools
    
    echo "INFO: Creating new environment..."
    if [ -d $WORKDIR/$OSNAME ]; then
        echo "ERR: Environment exists. Abort."
        exit
    fi
    mkdir $WORKDIR/$OSNAME
    touch $WORKDIR/$OSNAME/build-info.txt
    printf "$OSNAME\n$OSVER" >> $WORKDIR/$OSNAME/build-info.txt
    
    mkdir $WORKDIR/$OSNAME/image
    mkdir $WORKDIR/$OSNAME/debootstrap
    mkdir $WORKDIR/$OSNAME/root
    mkdir $WORKDIR/$OSNAME/custom-dpkgs
    touch $WORKDIR/$OSNAME/package-list
    
    echo "INFO: Environment $OSNAME is created successfully."

# update process
elif [ "$1" = "update" ]; then
    if [ -z "$2" ]; then
        echo "ERR: Path is not specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: New version is not specified. Abort."
        exit
    fi
    
    INFODIR=$WORKDIR/$2
    INFOFILE=$INFODIR/build-info.txt
    
    if [ ! -f $INFOFILE ]; then
        echo "ERR: Build information file doesn't exist. Abort."
        exit
    fi
    
    sed -i -e "2c $3" $INFOFILE
    echo "INFO: Build information has been changed successfully."

elif [ "$1" = "debootstrap" ]; then
    if [ -z "$2" ]; then
        echo "ERR: Target path is not specified. Abort."
        exit
    elif [ -z "$3" ]; then
        echo "ERR: Suite is not specified. Abort."
        exit
    elif [ -z "$4" ]; then
        echo "ERR: Mirror server's URL is not specified. Abort."
        exit
    fi
    
    BUILDINFO=$WORKDIR/$2/build-info.txt
    SUITE=$3
    TARGETPATH=$WORKDIR/$2/debootstrap
    URL=$4
    
    if [ ! -d $TARGETPATH ]; then
        echo "ERR: Target directory has not been found. Abort."
        exit
    fi
    
    echo "INFO: Executing debootstrap..."
    debootstrap --arch=amd64 --variant=minbase $SUITE $TARGETPATH $URL
    
    echo "INFO: Saving server URL for build..."
    printf "\n$SUITE\n$URL" >> $BUILDINFO
    
    echo "INFO: Process Finished."
    
elif [ "$1" = "build" ]; then
    if [ -z "$2" ]; then
        echo "ERR: Target path is not specified. Abort."
        exit
    fi
    
    TARGETPATH=$WORKDIR/$2
    
    if [ ! -d "$TARGETPATH" ]; then
        echo "ERR: No such directory. Abort."
        exit
    fi
    
    if [ ! -f "$TARGETPATH/build-info.txt" ]; then
        echo "ERR: Build information was not found. Abort."
        exit
    elif [ ! -f "$TARGETPATH/package-list" ]; then
        echo "ERR: Package list was not found. Abort."
        exit    
    elif [ ! -d "$TARGETPATH/custom-dpkgs" ]; then
        echo "ERR: Additional DPKGs folder was not found. Abort."
        exit
    elif [ ! -d "$TARGETPATH/root" ]; then
        echo "ERR: Customized root directory was not found. Abort."
        exit
    fi
    
    BUILDINFO=$TARGETPATH/build-info.txt
    PACKAGE_LIST=$TARGETPATH/package-list
    CUSTOMDPKGFOLDER=$TARGETPATH/custom-dpkgs
    EDITEDROOT=$TARGETPATH/root
    DEBOOTSTRAPDIR=$TARGETPATH/debootstrap
    IMAGEDIR=$TARGETPATH/image
    OSNAME=$(sed -n -e '1p' $BUILDINFO)
    OSBUILDVER=$(sed -n -e '2p' $BUILDINFO)
    
    echo "Starting build: 
    OSNAME: $OSNAME
    OSBUILDVER: $OSBUILDVER
    
    "
    
    if [ -f "$IMAGEDIR/casper/filesystem.squashfs" ] || [ -f "$IMAGEDIR/casper/filesystem.size" ] ; then
        rm -f $IMAGEDIR/casper/filesystem.squashfs
        rm -f $IMAGEDIR/casper/filesystem.size
    fi
    
    echo "INFO: Setting mount points..."
    mount --bind /dev $DEBOOTSTRAPDIR/dev
    mount --bind /run $DEBOOTSTRAPDIR/run

    echo "INFO: Setting chroot mount points..."
chroot $DEBOOTSTRAPDIR <<-EOS 
mount none -t proc /proc
mount none -t sysfs /sys
mount none -t devpts /dev/pts
export HOME=/root
EOS
    
    echo "INFO: Setting host name..."
    sed -n -e "1p" $BUILDINFO > $DEBOOTSTRAPDIR/etc/hostname
    
    echo "INFO: Setting up apt..."
    APT_REPOURL=$(sed -n -e "4p" $BUILDINFO)
    APT_REPOSUITE=$(sed -n -e "3p" $BUILDINFO)
cat <<- EOS > $DEBOOTSTRAPDIR/etc/apt/sources.list
deb $APT_REPOURL $APT_REPOSUITE main restricted universe multiverse
deb-src $APT_REPOURL $APT_REPOSUITE main restricted universe multiverse

deb $APT_REPOURL "$APT_REPOSUITE-security" main restricted universe multiverse
deb-src $APT_REPOURL "$APT_REPOSUITE-security" main restricted universe multiverse

deb $APT_REPOURL "$APT_REPOSUITE-updates" main restricted universe multiverse
deb-src $APT_REPOURL "$APT_REPOSUITE-updates" main restricted universe multiverse
EOS

chroot $DEBOOTSTRAPDIR <<- EOS
export LC_ALL=C
apt update
EOS
    
    echo "INFO: Installing important softwares..."
chroot $DEBOOTSTRAPDIR <<- EOS
export LC_ALL=C
apt install -y libterm-readline-gnu-perl systemd-sysv
dbus-uuidgen > /etc/machine-id
ln -fs /etc/machine-id /var/lib/dbus/machine-id
apt upgrade -y
apt install -y sudo casper laptop-detect os-prober network-manager resolvconf net-tools wireless-tools wpagui locales grub-common grub-gfxpayload-lists grub-pc grub-pc-bin grub2-common nano less curl memtest86+
apt install -y --no-install-recommends linux-generic
EOS
    
    echo "INFO: Installing specified softwares..."
    PACKAGES=("")
    while read i
    do
        PACKAGES+=("$i")
    done < $PACKAGE_LIST
    
chroot $DEBOOTSTRAPDIR << EOS
export LC_ALL=C
apt install -y ${PACKAGES[@]}
EOS
    if [ $(ls $CUSTOMDPKGFOLDER) != "" ]; then
        echo "INFO: Installing custom dpkgs..."
        CUSTOMDPKGS=()
        for i in ls $CUSTOMDPKGFOLDER
        do
            CUSTOMDPKGS+=("$CUSTOMDPKGFOLDER/$i")
        done
        cp ${CUSTOMDPKGS[@]} $DEBOOTSTRAPFOLDER/tmp/dpkgs
chroot $DEBOOTSTRAPDIR << EOS
export LC_ALL=C
dpkg -i /tmp/dpkgs/*
EOS
    fi
    
    echo "INFO: Setting up the environment..."
chroot $DEBOOTSTRAPDIR <<- EOS
export LC_ALL=C
locale-gen
dpkg-reconfigure resolvconf
cat <<EOF > /etc/NetworkManager/NetworkManager.conf
[main]
rc-manager=resolvconf
plugins=ifupdown,keyfile
dns=dnsmasq

[ifupdown]
managed=false
EOF
dpkg-reconfigure network-manager
echo nameserver 1.1.1.1 > /etc/resolv.conf
EOS
    
    echo "INFO: Cleaning up environments..."
chroot $DEBOOTSTRAPDIR <<- EOS
truncate -s /etc/machine-id
rm /sbin/initctl
dpkg-divert --rename --remove /sbin/initctl
export LC_ALL=C
rm -rf /tmp/*
apt autoremove -y
apt clean
umount /proc
umount /sys
umount /dev/pts
rm ~/.bash_history
EOS
    umount $DEBOOTSTRAPDIR/dev
    umount $DEBOOTSTRAPDIR/run
    
    echo "INFO: Copying edited root directory..."
    cp -R $EDITEDROOT/ $DEBOOTSTRAPDIR/
    
    echo "INFO: Creating ISO environment..."
    mkdir -p $IMAGEDIR/{casper,isolinux,install}
    cp $DEBOOTSTRAPDIR/boot/vmlinuz-**-**-generic $IMAGEDIR/casper/vmlinuz
    cp $DEBOOTSTRAPDIR/boot/initrd.img-**-**-generic $IMAGEDIR/casper/initrd
    cp $DEBOOTSTRAPDIR/boot/memtest86+.bin $IMAGEDIR/install/memtest86+
    
    echo "INFO: Downloading Memtest86+ for EFI..."
    curl -o $IMAGEDIR/install/tmp-memtest86.zip https://www.memtest86.com/downloads/memtest86-usb.zip
    unzip -p $IMAGEDIR/install/tmp-memtest86.zip memtest86-usb.img > $IMAGEDIR/install/memtest86-efi
    rm -f $IMAGEDIR/install/tmp-memtest86.zip
    
    echo "INFO: Constructing GRUB menus..."
    touch $IMAGEDIR/$OSNAME
cat <<EOS > $IMAGEDIR/isolinux/grub.cfg
search --set=root --file /$OSNAME

set default=0
set timeout=5
insmod all_video

menuentry "$OSNAME $OSVER Live Boot" {
	echo "Loading linux..."
	linux /casper/vmlinuz boot=casper nopersistent toram quiet splash ---
	echo "Loading initial ram disk..."
	initrd /casper/initrd
}

menuentry "$OSNAME $OSVER Installation"{
	echo "Loading linux..."
	linux /casper/vmlinuz boot=casper only-ubiquity quiet splash ---
	echo "Loading initial ram disk..."
	initrd /casper/initrd
}

if [ ${grub_platform} == "efi" ]; then
	menuentry "Memtest86+ (UEFI)"{
		linux /instal/memtest86-efi keyboard=both
	}
	
	menuentry "UEFI Firmware Settings" --id "uefi-firmware"{
		fwsetup
	}
fi
	
if [ ${grub_platform} == "pc" ]; then
	menuentry "Memtest86+ (BIOS)"{
		linux16 /install/memtest86+
	}
fi

menuentry "Reboot"{
	echo "System rebooting..."
	reboot
}

menuentry "Shutdown"{
	echo "System shutting now..."
	halt
}


EOS
    
    echo "INFO: Creating filesystem.manifest..."
    chroot $DEBOOTSTRAPDIR dpkg-query -W --showformat="${Package} ${Version}\n" | tee $IMAGEDIR/casper/filesystem.manifest
    
    sudo sed -i "/ubiquity/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/casper/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/discover/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/laptop-detect/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    sudo sed -i "/os-prober/d" $IMAGEDIR/casper/filesystem.manifest-desktop
    
    echo "INFO: Creating squashfs..."
    mksquashfs $DEBOOTSTRAPDIR $IMAGEDIR/casper/filesystem.squashfs
    printf $(sudo du -sx --block-size=1 $DEBOOTSTRAPDIR | cut -f1) > $IMAGEDIR/casper/filesystem.size
    
    echo "INFO: Creating diskdefines..."
echo "#define DISKNAME ${OSNAME} ${OSBUILDVER}
#define TYPE binary
#define TYPEbinary 1
#define ARCH amd64
#define DISKNUM 1
#define DISKNUM1 1
#define TOTALNUM 0
#define TOTALNUM0 1" > $IMAGEDIR/README.diskdefines
    
    echo "INFO: Configuring GRUB2 EFI..."
    grub-mkstandalone --format=x86_64-efi --output=$IMAGEDIR/isolinux/bootx64.efi --locales="" --fonts="" "boot/grub/grub.cfg=$IMAGEDIR/isolinux/grub.cfg"
    
    echo "INFO: Creating UEFI boot image..."
    dd if=/dev/zero of=$IMAGEDIR/isolinux/efiboot.img bs=1M count=10
    mkfs.vfat $IMAGEDIR/isolinux/efiboot.img
    LC_CTYPE=C mmd -i $IMAGEDIR/isolinux/efiboot.img efi efi/boot
    LC_CTYPE=C mcopy -i $IMAGEDIR/isolinux/efiboot.img $IMAGEDIR/isolinux/bootx64.efi ::efi/boot
    
    echo "INFO: Configuring GRUB2 PC..."
    grub-mkstandalone --format=i386-pc --output=$IMAGEDIR/isolinux/grub.img --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" --modules="linux16 linux normal iso9660 biosdisk search" --locales="" --fonts="" "boot/grub/grub.cfg=$IMAGEDIR/isolinux/grub.cfg"
    cat /usr/lib/grub/i386-pc/cdboot.img $IMAGEDIR/isolinux/grub.img > $IMAGEDIR/isolinux/bios.img 
    
    echo "INFO: Calculating checksums..."
    sudo /bin/bash -c "(find . -type f -print0 | xargs -0 md5sum | grep -v -e 'md5sum.txt' -e 'bios.img' -e 'efiboot.img' > md5sum.txt)"
    
    echo "INFO: Generating ISO..."
    xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid "$OSNAME $OSBUILDVER Install" -output "$IMAGEDIR/$OSNAME-$OSBUILDVER-amd64-live.iso" -eltorito-boot boot/grub/bios.img -no-emul-boot -boot-load-size 4 -boot-info-table --eltorito-catalog boot/grub/boot.cat --grub2-boot-info --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img -eltorito-alt-boot -e EFI/efiboot.img -no-emul-boot -append_partition 2 0xef $IMAGEDIR/isolinux/efiboot.img -m "$IMAGEDIR/isolinux/efiboot.img" -m "$IMAGEDIR/isolinux/bios.img" -graft-points "/EFI/efiboot.img=$IMAGEDIR/isolinux/efiboot.img" "/boot/grub/bios.img=$IMAGEDIR/isolinux/bios.img" "$IMAGEDIR"
    
    echo "INFO: Build process has been finished."

    
elif [ -z "$1" ] || [ "$1" = "help" ]; then
    echo "Usage:
     ./ubuntu-buildscript [option] [arguments]
      Options:
         setup [OS-name] [version]: Setup a new environment.
         update [path] [new-version]: Update revision of specified environment.
         debootstrap [path] [suite] [URL]: Execute debootstrap to the specified directory.
         build [path]: Build debootstrap environment."
else
    echo "ERR: Unexpected option."
fi
